
Project 2: You are to implement an inter-active new password checker. 
          First, your program displays the password rules (see below) and then
		asks the user to create a new password 
	    
          After the user typed his/her password,
	    your program checks the validity of new passward against the password rules.
	    If the new password is NOT valid, your program will re-display
	    the password rules and ask the user for a new password. 
	    If the user's new password is valid, then, your program will ask the user to re-type 
	    the new password for the second time to see if it matches the original typed password;
	    if it matches, then your program will say "your password will be updated in 2 minuties" and exit; 
	    if it does NOT match, your program will ask the user to create a new password all over
		again as at the beginning.

 The set of password rules is given below.

	1) The password length: 8-16 characters
	2) At least one numerical, i.e., 0, 1, 2,..
	3) At least one upper case letter, i.e., A, B, C, ...
	4) At least one lower case letter, i.e., a, b, c, ...
	5) At least one of the special characters, but it must be 
	   within the set:{ $ ^ & #  ( ) } at total of six (6).
	   no other special characters is allowed.
  
************************
Language: C++ and Java 

Due Date: C++  Soft copy: 2/18/2017 Saturday before midnight
Due Date: Java Soft copy: 2/20/2017 Monday before midnight

Due Date: C++ Hard copy: 2/21/2017 Tuesday in class
Due Date: Java Hard copy: 2/21/2017 Tuesday in class

********************************
I. Input: inter-active from user

********************************

II. Output: inter-active displays on screen

********************************

III. Data structure:
********************************

 - A passWordChecker class
	
	- password (string) // from user

	- secondPassword (string) // from user

	- charCount[5] (int) // an 1D integer array 
					// to store the counts of 
				     // each of the password ruls:
				charCount[0] store the count of illegal special characters
				charCount[1] store the count of numeric
				charCount[2] store the count of lower case characters
				charCount[3] store the count of upper case characters
				charCount[4] store the count of legal special characters
				
				// intialize to zero
				
	- passwordLength (int) // initally set to 0
    
	 methods:

	- constructor () // initalize all members accordingly
 
	- displyRules  // disply the password rules on the screen

	- displySucess  // disply "your password will be updated in 2 minuties" on the screen

	- checkChar (ch) // this method check the parameter, ch, to see what it is,
                      // i.e., numberic, upper case, lower case, which special character, 
				 // it returns an index 0, 1, 2, 3, or 4, accordingly
				 // Check the ascii code for easy indexing!!!!	
				// This is the only method in this project that is a bit challenge to code!

	- checker (...) // this method checks each entry of charCount array to determine
	                // the validity of the password, ie, 
			     // charCount[0] is 0
			     // charCount[1] to charCount[4] are greater than 0
				// if all valid, it returns 1, otherwise, returns 0.

	- matching(s1, s2) // this method checks to see if  s1 and s2 are matched exactly;
				   // if match, it returns 1, otherwise, it returns 0

	
********************************
Algorihtm steps:
********************************

Step 1: displyRules
		   
Step 2: password <-- from the user
	  passwordLength <-- the length of password (use strlen)

step 3: repeat step 1 to step 2 if passwordLeng is NOT within the range of 8 - 16
 	
step 4: i <--0
	   
step 5: index <-- checkChar(password[i]) // make sure the index is within 0 - 4
	   charCount[index] ++
	  
step 6: i++

step 7: repeat step 5 to step 6 until the last password character is checked.

step 8: validYesNo <-- checker(...)

step 9: repeat step 1 to step 8 if validYesNo is 0

step 10: disply and ask user to re-type his/her password 
        
step 11: secondPassword <-- from the user

step 12: matchYesNo <-- matching(password, secondPassword)

step 13: repeat step 1 to step 12 if matchYesNo is 0

step 14: displySucess  
